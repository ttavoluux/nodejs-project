import Jimp from "jimp";

let img1 = null;
let img2 = null;

const handler = async (m, { conn, usedPrefix, command }) => {
    try {
        // Comando i1 para la primera imagen
        if (command === 'i1') {
            let mime = (m.quoted ? m.quoted : m).mimetype || m.mediaType || "";
            if (!mime) throw `‚ï∞‚ä±‚ùóÔ∏è‚ä± *ùôáùôä ùôêùôéùôäÃÅ ùôàùòºùôá | ùôêùôéùôÄùòø ùôÑùôè ùôíùôçùôäùôâùôÇ* ‚ä±‚ùóÔ∏è‚ä±‚ïÆ\n\nùôÄùôâùôëùôÑùôÄ ùôêùôâùòº ùôÑùôàùòºùôÇùôÄùôâ ùôä ùôçùôÄùôéùôãùôäùôâùòøùòº ùòº ùôêùôâùòº ùôÑùôàùòºùôÇùôÄùôâ ùòæùôäùôâ ùôÄùôá ùòæùôäùôàùòºùôâùòøùôä ${usedPrefix + command}`;
            if (!/image\/(jpe?g|png)/.test(mime)) throw `‚ï∞‚ä±‚ö†Ô∏è‚ä± *ùòºùòøùôëùôÄùôçùôèùôÄùôâùòæùôÑùòº | ùôíùòºùôçùôâùôÑùôâùôÇ* ‚ä±‚ö†Ô∏è‚ä±‚ïÆ\n\nEL FORMATO DEL ARCHIVO (${mime}) NO ES COMPATIBLE, ENV√çA O RESPONDE A UNA FOTO`;

            // Descargar la primera imagen
            img1 = await (m.quoted ? m.quoted.download() : m.download());
            m.reply("*‚ú® Primera imagen recibida. Ahora env√≠a la segunda imagen con el comando .i2*");
        }

        // Comando i2 para la segunda imagen
        else if (command === 'i2') {
            let mime = (m.quoted ? m.quoted : m).mimetype || m.mediaType || "";
            if (!mime) throw `‚ï∞‚ä±‚ùóÔ∏è‚ä± *ùôáùôä ùôêùôéùôäÃÅ ùôàùòºùôá | ùôêùôéùôÄùòø ùôÑùôè ùôíùôçùôäùôâùôÇ* ‚ä±‚ùóÔ∏è‚ä±‚ïÆ\n\nùôÄùôâùôëùôÑùôÄ ùôêùôâùòº ùôÑùôàùòºùôÇùôÄùôâ ùôä ùôçùôÄùôéùôãùôäùôâùòøùòº ùòº ùôêùôâùòº ùôÑùôàùòºùôÇùôÄùôâ ùòæùôäùôâ ùôÄùôá ùòæùôäùôàùòºùôâùòøùôä ${usedPrefix + command}`;
            if (!/image\/(jpe?g|png)/.test(mime)) throw `‚ï∞‚ä±‚ö†Ô∏è‚ä± *ùòºùòøùôëùôÄùôçùôèùôÄùôâùòæùôÑùòº | ùôíùòºùôçùôâùôÑùôâùôÇ* ‚ä±‚ö†Ô∏è‚ä±‚ïÆ\n\nEL FORMATO DEL ARCHIVO (${mime}) NO ES COMPATIBLE, ENV√çA O RESPONDE A UNA FOTO`;

            // Descargar la segunda imagen
            img2 = await (m.quoted ? m.quoted.download() : m.download());

            // Verificar si ya se recibi√≥ la primera imagen
            if (!img1) throw "*‚ùå No has enviado una primera imagen. Usa el comando .i1 para enviar la primera imagen*";

            // Usar Jimp para combinar las im√°genes verticalmente
            const image1 = await Jimp.read(img1);
            const image2 = await Jimp.read(img2);

            // La altura total es la suma de las alturas de ambas im√°genes
            const width = Math.min(image1.bitmap.width, image2.bitmap.width);  // El ancho ser√° el m√°s grande de las dos
            const height = image1.bitmap.height + image2.bitmap.height;  // La altura total es la suma de las alturas

            // Crear una nueva imagen con el tama√±o adecuado
            const combined = new Jimp(width, height);
            // Recortar y ajustar la primera imagen al ancho m√°s peque√±o
            if (image1.bitmap.width > width) {
                const cropWidth = image1.bitmap.width - width; // Calcular la diferencia
                image1.crop(cropWidth / 2, 0, width, image1.bitmap.height); // Recortar el exceso desde los lados
            }

            // Recortar y ajustar la segunda imagen al ancho m√°s peque√±o
            if (image2.bitmap.width > width) {
                const cropWidth = image2.bitmap.width - width; // Calcular la diferencia
                image2.crop(cropWidth / 2, 0, width, image2.bitmap.height); // Recortar el exceso desde los lados
            }

            // Poner la primera imagen en la parte superior
            combined.composite(image1, 0, 0);

            // Poner la segunda imagen debajo de la primera
            combined.composite(image2, 0, image1.bitmap.height);

            // Convertir la imagen combinada a buffer y enviarla
            const buffer = await combined.getBufferAsync(Jimp.MIME_JPEG);
            await conn.sendMessage(m.chat, { image: buffer, caption: "‚ú® Aqu√≠ tienes tus im√°genes unidas üíñüå∏." }, { quoted: m });

            // Limpiar las im√°genes para que no se acumulen
            img1 = null;
            img2 = null;
        }
    } catch (error) {
        m.reply(`‚ï∞‚ä±‚ö†Ô∏è‚ä± *ERROR* ‚ä±‚ö†Ô∏è‚ä±‚ïÆ\n\n${error}`);
    }
};

handler.help = ["i1", "i2"];
handler.tags = ["image"];
handler.command = /^(i1|i2)$/i;

export default handler;
